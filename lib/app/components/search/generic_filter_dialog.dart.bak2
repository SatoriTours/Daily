import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:daily_satori/app/styles/index.dart';

/// 通用过滤对话框
/// 支持日期、标签、收藏等过滤条件
class GenericFilterDialog extends StatefulWidget {
  final DateTime? initialSelectedDate;
  final List<int> initialSelectedTags;
  final bool initialIsFavorite;
  final List<String> availableTags;
  final List<int> availableTagIds;
  final ValueChanged<DateTime?> onDateSelected;
  final ValueChanged<List<int>> onTagsSelected;
  final ValueChanged<bool> onFavoriteChanged;
  final VoidCallback onClearAll;
  const GenericFilterDialog({
    super.key,
    this.initialSelectedDate,
    this.initialSelectedTags = const [],
    this.initialIsFavorite = false,
    required this.availableTags,
    required this.availableTagIds,
    required this.onDateSelected,
    required this.onTagsSelected,
    required this.onFavoriteChanged,
    required this.onClearAll,
  });
  @override
  State<GenericFilterDialog> createState() => _GenericFilterDialogState();
}
class _GenericFilterDialogState extends State<GenericFilterDialog> {
  late DateTime? selectedDate;
  late List<int> selectedTags;
  late bool isFavorite;
  @override
  void initState() {
    super.initState();
    selectedDate = widget.initialSelectedDate;
    selectedTags = List.from(widget.initialSelectedTags);
    isFavorite = widget.initialIsFavorite;
  }
  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        constraints: const BoxConstraints(maxWidth: 400, maxHeight: 500),
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHeader(context),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildDateFilter(context),
                    const SizedBox(height: 16),
                    _buildTagsFilter(context),
                    const SizedBox(height: 16),
                    _buildFavoriteFilter(context),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            _buildActions(context),
          ],
        ),
      ),
    );
  }
  Widget _buildHeader(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text('过滤条件', style: MyFontStyle.titleLarge.copyWith(fontWeight: FontWeight.bold)),
        IconButton(icon: const Icon(Icons.close), onPressed: () => Navigator.pop(context)),
      ],
    );
  }
  Widget _buildDateFilter(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('日期', style: MyFontStyle.titleMedium.copyWith(fontWeight: FontWeight.w600)),
        const SizedBox(height: 8),
        InkWell(
          onTap: () async {
            final date = await showDatePicker(
              context: context,
              initialDate: selectedDate ?? DateTime.now(),
              firstDate: DateTime(2000),
              lastDate: DateTime.now(),
            );
            if (date != null) {
              setState(() {
                selectedDate = date;
              });
              widget.onDateSelected(date);
            }
          },
          borderRadius: BorderRadius.circular(8),
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            decoration: BoxDecoration(
              color: AppColors.cardBackground(context),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: AppColors.border(context)),
            ),
            child: Row(
              children: [
                Icon(Icons.calendar_today, size: 16, color: AppColors.secondary(context)),
                const SizedBox(width: 8),
                Text(
                  selectedDate != null
                      ? '${selectedDate!.year}-${selectedDate!.month.toString().padLeft(2, '0')}-${selectedDate!.day.toString().padLeft(2, '0')}'
                      : '选择日期',
                  style: MyFontStyle.bodyMedium,
                ),
                if (selectedDate != null) ...[
                  const Spacer(),
                  IconButton(
                    icon: const Icon(Icons.clear, size: 16),
                    onPressed: () {
                      setState(() {
                        selectedDate = null;
                      });
                      widget.onDateSelected(null);
                    },
                  ),
                ],
              ],
            ),
          ),
        ),
      ],
    );
  }
  Widget _buildTagsFilter(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('标签', style: MyFontStyle.titleMedium.copyWith(fontWeight: FontWeight.w600)),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: List.generate(widget.availableTags.length, (index) {
            final tag = widget.availableTags[index];
            final tagId = widget.availableTagIds[index];
            final isSelected = selectedTags.contains(tagId);
            return FilterChip(
              label: Text(tag),
              selected: isSelected,
              onSelected: (selected) {
                setState(() {
                  if (selected) {
                    selectedTags.add(tagId);
                  } else {
                    selectedTags.remove(tagId);
                  }
                });
                widget.onTagsSelected(selectedTags);
              },
              backgroundColor: AppColors.cardBackground(context),
              selectedColor: AppColors.primary(context).withValues(alpha: 0.2),
              labelStyle: MyFontStyle.bodySmall,
            );
          }),
        ),
      ],
    );
  }
  Widget _buildFavoriteFilter(BuildContext context) {
    return Row(
      children: [
        Checkbox(
          value: isFavorite,
          onChanged: (value) {
            setState(() {
              isFavorite = value ?? false;
            });
            widget.onFavoriteChanged(isFavorite);
          },
        ),
        Text('仅显示收藏', style: MyFontStyle.bodyMedium),
      ],
    );
  }
  Widget _buildActions(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        TextButton(
          onPressed: () {
            setState(() {
              selectedDate = null;
              selectedTags.clear();
              isFavorite = false;
            });
            widget.onClearAll();
            Navigator.pop(context);
          },
          child: Text('清除全部', style: MyFontStyle.bodyMedium.copyWith(color: AppColors.error(context))),
        ),
        ElevatedButton(onPressed: () => Navigator.pop(context), child: const Text('确定')),
      ],
    );
  }
}
/// 过滤配置辅助类
class FilterConfig {
  final DateTime? date;
  final List<int> tags;
  final bool isFavorite;
  final String? keyword;
  const FilterConfig({this.date, this.tags = const [], this.isFavorite = false, this.keyword});
  bool get hasActiveFilters => date != null || tags.isNotEmpty || isFavorite || keyword?.isNotEmpty == true;
  FilterConfig copyWith({DateTime? date, List<int>? tags, bool? isFavorite, String? keyword}) {
    return FilterConfig(
      date: date ?? this.date,
      tags: tags ?? this.tags,
      isFavorite: isFavorite ?? this.isFavorite,
      keyword: keyword ?? this.keyword,
    );
  }
  @override
  String toString() {
    return 'FilterConfig(date: $date, tags: $tags, isFavorite: $isFavorite, keyword: $keyword)';
  }
}