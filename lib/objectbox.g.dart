// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/objectbox/article.dart';
import 'app/objectbox/diary.dart';
import 'app/objectbox/image.dart';
import 'app/objectbox/screenshot.dart';
import 'app/objectbox/setting.dart';
import 'app/objectbox/tag.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4903589311666536386),
      name: 'Article',
      lastPropertyId: const obx_int.IdUid(12, 7680535396124443137),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 453743895333992170),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4519536725550540920),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 496378034516100833),
            name: 'aiTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4728610988192463105),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2274299526790739672),
            name: 'aiContent',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 377533504692832437),
            name: 'htmlContent',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4895738475505904017),
            name: 'url',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 5900042734245125509)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4500975140834464592),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2621482578674125525),
            name: 'comment',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2308496535225436229),
            name: 'pubDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 838506994697291236),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7680535396124443137),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 6883695399629113204),
            name: 'tags',
            targetId: const obx_int.IdUid(4, 4010830939855844436))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(name: 'images', srcEntity: 'Image', srcField: ''),
        obx_int.ModelBacklink(
            name: 'screenshots', srcEntity: 'Screenshot', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 424537266143031752),
      name: 'Image',
      lastPropertyId: const obx_int.IdUid(4, 6584433337166318251),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4080397277496380877),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7445398378320888646),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 879253094713338292),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6584433337166318251),
            name: 'articleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 2082700956413604628),
            relationTarget: 'Article')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1263235097771623841),
      name: 'Screenshot',
      lastPropertyId: const obx_int.IdUid(4, 8855671235579092811),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7874409913270687572),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3987560395608201477),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8855671235579092811),
            name: 'articleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 624864476904013174),
            relationTarget: 'Article')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4010830939855844436),
      name: 'Tag',
      lastPropertyId: const obx_int.IdUid(3, 685644473537562706),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7911382469876081683),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3154326798013673890),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(5, 5582228043341448759)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 685644473537562706),
            name: 'icon',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'articles', srcEntity: 'Article', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 5883101161320296494),
      name: 'Setting',
      lastPropertyId: const obx_int.IdUid(3, 7535906761124713356),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7183168802425716023),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 74969104906883253),
            name: 'key',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 357593586412620124)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7535906761124713356),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 8005082016940708333),
      name: 'Diary',
      lastPropertyId: const obx_int.IdUid(7, 3347879950888769925),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5733466291042088538),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8464627663024168708),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5750639237251441515),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1119453735783702989),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 864054740454984065),
            name: 'tags',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2985789923335714270),
            name: 'mood',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3347879950888769925),
            name: 'images',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 8005082016940708333),
      lastIndexId: const obx_int.IdUid(5, 5582228043341448759),
      lastRelationId: const obx_int.IdUid(4, 6883695399629113204),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [6112857799928721251],
      retiredRelationUids: const [
        4899483606642247262,
        6893224121746435434,
        2860519894126837285
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Article: obx_int.EntityDefinition<Article>(
        model: _entities[0],
        toOneRelations: (Article object) => [],
        toManyRelations: (Article object) => {
              obx_int.RelInfo<Article>.toMany(4, object.id): object.tags,
              obx_int.RelInfo<Image>.toOneBacklink(
                      4, object.id, (Image srcObject) => srcObject.article):
                  object.images,
              obx_int.RelInfo<Screenshot>.toOneBacklink(4, object.id,
                      (Screenshot srcObject) => srcObject.article):
                  object.screenshots
            },
        getId: (Article object) => object.id,
        setId: (Article object, int id) {
          object.id = id;
        },
        objectToFB: (Article object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final aiTitleOffset =
              object.aiTitle == null ? null : fbb.writeString(object.aiTitle!);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final aiContentOffset = object.aiContent == null
              ? null
              : fbb.writeString(object.aiContent!);
          final htmlContentOffset = object.htmlContent == null
              ? null
              : fbb.writeString(object.htmlContent!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final commentOffset =
              object.comment == null ? null : fbb.writeString(object.comment!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, aiTitleOffset);
          fbb.addOffset(3, contentOffset);
          fbb.addOffset(4, aiContentOffset);
          fbb.addOffset(5, htmlContentOffset);
          fbb.addOffset(6, urlOffset);
          fbb.addBool(7, object.isFavorite);
          fbb.addOffset(8, commentOffset);
          fbb.addInt64(9, object.pubDate?.millisecondsSinceEpoch);
          fbb.addInt64(10, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(11, object.createdAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final pubDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final aiTitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final aiContentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final htmlContentParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final isFavoriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final commentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final pubDateParam = pubDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(pubDateValue);
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final object = Article(
              id: idParam,
              title: titleParam,
              aiTitle: aiTitleParam,
              content: contentParam,
              aiContent: aiContentParam,
              htmlContent: htmlContentParam,
              url: urlParam,
              isFavorite: isFavoriteParam,
              comment: commentParam,
              pubDate: pubDateParam,
              updatedAt: updatedAtParam,
              createdAt: createdAtParam);
          obx_int.InternalToManyAccess.setRelInfo<Article>(object.tags, store,
              obx_int.RelInfo<Article>.toMany(4, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Article>(
              object.images,
              store,
              obx_int.RelInfo<Image>.toOneBacklink(
                  4, object.id, (Image srcObject) => srcObject.article));
          obx_int.InternalToManyAccess.setRelInfo<Article>(
              object.screenshots,
              store,
              obx_int.RelInfo<Screenshot>.toOneBacklink(
                  4, object.id, (Screenshot srcObject) => srcObject.article));
          return object;
        }),
    Image: obx_int.EntityDefinition<Image>(
        model: _entities[1],
        toOneRelations: (Image object) => [object.article],
        toManyRelations: (Image object) => {},
        getId: (Image object) => object.id,
        setId: (Image object, int id) {
          object.id = id;
        },
        objectToFB: (Image object, fb.Builder fbb) {
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, urlOffset);
          fbb.addOffset(2, pathOffset);
          fbb.addInt64(3, object.article.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Image(id: idParam, url: urlParam, path: pathParam);
          object.article.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.article.attach(store);
          return object;
        }),
    Screenshot: obx_int.EntityDefinition<Screenshot>(
        model: _entities[2],
        toOneRelations: (Screenshot object) => [object.article],
        toManyRelations: (Screenshot object) => {},
        getId: (Screenshot object) => object.id,
        setId: (Screenshot object, int id) {
          object.id = id;
        },
        objectToFB: (Screenshot object, fb.Builder fbb) {
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, pathOffset);
          fbb.addInt64(3, object.article.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Screenshot(id: idParam, path: pathParam);
          object.article.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.article.attach(store);
          return object;
        }),
    Tag: obx_int.EntityDefinition<Tag>(
        model: _entities[3],
        toOneRelations: (Tag object) => [],
        toManyRelations: (Tag object) => {
              obx_int.RelInfo<Article>.toManyBacklink(4, object.id):
                  object.articles
            },
        getId: (Tag object) => object.id,
        setId: (Tag object, int id) {
          object.id = id;
        },
        objectToFB: (Tag object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final iconOffset =
              object.icon == null ? null : fbb.writeString(object.icon!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, iconOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final iconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Tag(id: idParam, name: nameParam, icon: iconParam);
          obx_int.InternalToManyAccess.setRelInfo<Tag>(object.articles, store,
              obx_int.RelInfo<Article>.toManyBacklink(4, object.id));
          return object;
        }),
    Setting: obx_int.EntityDefinition<Setting>(
        model: _entities[4],
        toOneRelations: (Setting object) => [],
        toManyRelations: (Setting object) => {},
        getId: (Setting object) => object.id,
        setId: (Setting object, int id) {
          object.id = id;
        },
        objectToFB: (Setting object, fb.Builder fbb) {
          final keyOffset =
              object.key == null ? null : fbb.writeString(object.key!);
          final valueOffset =
              object.value == null ? null : fbb.writeString(object.value!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object = Setting(id: idParam, key: keyParam, value: valueParam);

          return object;
        }),
    Diary: obx_int.EntityDefinition<Diary>(
        model: _entities[5],
        toOneRelations: (Diary object) => [],
        toManyRelations: (Diary object) => {},
        getId: (Diary object) => object.id,
        setId: (Diary object, int id) {
          object.id = id;
        },
        objectToFB: (Diary object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          final tagsOffset =
              object.tags == null ? null : fbb.writeString(object.tags!);
          final moodOffset =
              object.mood == null ? null : fbb.writeString(object.mood!);
          final imagesOffset =
              object.images == null ? null : fbb.writeString(object.images!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(3, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(4, tagsOffset);
          fbb.addOffset(5, moodOffset);
          fbb.addOffset(6, imagesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final tagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final moodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final imagesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final object = Diary(
              id: idParam,
              content: contentParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              tags: tagsParam,
              mood: moodParam,
              images: imagesParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Article] entity fields to define ObjectBox queries.
class Article_ {
  /// See [Article.id].
  static final id =
      obx.QueryIntegerProperty<Article>(_entities[0].properties[0]);

  /// See [Article.title].
  static final title =
      obx.QueryStringProperty<Article>(_entities[0].properties[1]);

  /// See [Article.aiTitle].
  static final aiTitle =
      obx.QueryStringProperty<Article>(_entities[0].properties[2]);

  /// See [Article.content].
  static final content =
      obx.QueryStringProperty<Article>(_entities[0].properties[3]);

  /// See [Article.aiContent].
  static final aiContent =
      obx.QueryStringProperty<Article>(_entities[0].properties[4]);

  /// See [Article.htmlContent].
  static final htmlContent =
      obx.QueryStringProperty<Article>(_entities[0].properties[5]);

  /// See [Article.url].
  static final url =
      obx.QueryStringProperty<Article>(_entities[0].properties[6]);

  /// See [Article.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<Article>(_entities[0].properties[7]);

  /// See [Article.comment].
  static final comment =
      obx.QueryStringProperty<Article>(_entities[0].properties[8]);

  /// See [Article.pubDate].
  static final pubDate =
      obx.QueryDateProperty<Article>(_entities[0].properties[9]);

  /// See [Article.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Article>(_entities[0].properties[10]);

  /// See [Article.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Article>(_entities[0].properties[11]);

  /// see [Article.tags]
  static final tags =
      obx.QueryRelationToMany<Article, Tag>(_entities[0].relations[0]);

  /// see [Article.images]
  static final images = obx.QueryBacklinkToMany<Image, Article>(Image_.article);

  /// see [Article.screenshots]
  static final screenshots =
      obx.QueryBacklinkToMany<Screenshot, Article>(Screenshot_.article);
}

/// [Image] entity fields to define ObjectBox queries.
class Image_ {
  /// See [Image.id].
  static final id = obx.QueryIntegerProperty<Image>(_entities[1].properties[0]);

  /// See [Image.url].
  static final url = obx.QueryStringProperty<Image>(_entities[1].properties[1]);

  /// See [Image.path].
  static final path =
      obx.QueryStringProperty<Image>(_entities[1].properties[2]);

  /// See [Image.article].
  static final article =
      obx.QueryRelationToOne<Image, Article>(_entities[1].properties[3]);
}

/// [Screenshot] entity fields to define ObjectBox queries.
class Screenshot_ {
  /// See [Screenshot.id].
  static final id =
      obx.QueryIntegerProperty<Screenshot>(_entities[2].properties[0]);

  /// See [Screenshot.path].
  static final path =
      obx.QueryStringProperty<Screenshot>(_entities[2].properties[1]);

  /// See [Screenshot.article].
  static final article =
      obx.QueryRelationToOne<Screenshot, Article>(_entities[2].properties[2]);
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// See [Tag.id].
  static final id = obx.QueryIntegerProperty<Tag>(_entities[3].properties[0]);

  /// See [Tag.name].
  static final name = obx.QueryStringProperty<Tag>(_entities[3].properties[1]);

  /// See [Tag.icon].
  static final icon = obx.QueryStringProperty<Tag>(_entities[3].properties[2]);
}

/// [Setting] entity fields to define ObjectBox queries.
class Setting_ {
  /// See [Setting.id].
  static final id =
      obx.QueryIntegerProperty<Setting>(_entities[4].properties[0]);

  /// See [Setting.key].
  static final key =
      obx.QueryStringProperty<Setting>(_entities[4].properties[1]);

  /// See [Setting.value].
  static final value =
      obx.QueryStringProperty<Setting>(_entities[4].properties[2]);
}

/// [Diary] entity fields to define ObjectBox queries.
class Diary_ {
  /// See [Diary.id].
  static final id = obx.QueryIntegerProperty<Diary>(_entities[5].properties[0]);

  /// See [Diary.content].
  static final content =
      obx.QueryStringProperty<Diary>(_entities[5].properties[1]);

  /// See [Diary.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Diary>(_entities[5].properties[2]);

  /// See [Diary.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Diary>(_entities[5].properties[3]);

  /// See [Diary.tags].
  static final tags =
      obx.QueryStringProperty<Diary>(_entities[5].properties[4]);

  /// See [Diary.mood].
  static final mood =
      obx.QueryStringProperty<Diary>(_entities[5].properties[5]);

  /// See [Diary.images].
  static final images =
      obx.QueryStringProperty<Diary>(_entities[5].properties[6]);
}
