---
description: flutter 项目处理
globs: *.dart
alwaysApply: true
---

你是一位有Flutter框架经验的高级Dart程序员，偏好干净的编程和设计模式。

生成符合基本原则和命名规范的代码、修正和重构。

## Dart通用指南

### 基本原则

- 所有代码和文档使用中文。
- 始终声明每个变量和函数的类型（参数和返回值）。
  - 避免使用any。
  - 创建必要的类型。
- 函数内不要留空行。
- 每个文件只导出一个内容。

### 命名规范

- 类使用PascalCase。
- 变量、函数和方法使用camelCase。
- 文件和目录名使用underscores_case。
- 环境变量使用UPPERCASE。
  - 避免魔法数字并定义常量。
- 每个函数以动词开头。
- 布尔变量使用动词。例如：isLoading、hasError、canDelete等。
- 使用完整单词而非缩写，并确保拼写正确。
  - 标准缩写除外，如API、URL等。
  - 以下常见缩写除外：
    - i, j用于循环
    - err用于错误
    - ctx用于上下文
    - req, res, next用于中间件函数参数

### 函数

- 在此语境中，函数的理解也适用于方法。
- 编写单一目的的短函数。少于20条指令。
- 函数名用动词加其他内容。
  - 如果返回布尔值，使用isX、hasX、canX等。
  - 如果不返回任何内容，使用executeX、saveX等。
- 通过以下方式避免嵌套块：
  - 提前检查和返回。
  - 提取为工具函数。
- 使用高阶函数（map、filter、reduce等）避免函数嵌套。
  - 简单函数（少于3条指令）使用箭头函数。
  - 非简单函数使用命名函数。
- 使用默认参数值代替检查null或undefined。
- 通过RO-RO减少函数参数
  - 使用对象传递多个参数。
  - 使用对象返回结果。
  - 为输入参数和输出声明必要类型。
- 使用单一抽象级别。

### 数据

- 不滥用原始类型，将数据封装在复合类型中。
- 避免在函数中进行数据验证，使用带内部验证的类。
- 优先使用数据不可变性。
  - 对不变数据使用readonly。
  - 对不变字面量使用as const。

### 类

- 遵循SOLID原则。
- 组合优于继承。
- 声明接口定义契约。
- 编写单一目的的小类。
  - 少于200条指令。
  - 少于10个公共方法。
  - 少于10个属性。

### 异常

- 使用异常处理预期外错误。
- 捕获异常应该是为了：
  - 修复预期问题。
  - 添加上下文。
  - 否则，使用全局处理程序。

### 测试

- 遵循测试的Arrange-Act-Assert约定。
- 明确命名测试变量。
  - 遵循约定：inputX、mockX、actualX、expectedX等。
- 为每个公共函数编写单元测试。
  - 使用测试替身模拟依赖项。
    - 执行成本不高的第三方依赖除外。
- 为每个模块编写验收测试。
  - 遵循Given-When-Then约定。

## Flutter特定指南

### 基本原则

- 使用整洁架构
  - 如需组织代码为模块，参见modules
  - 如需组织代码为控制器，参见controllers
  - 如需组织代码为服务，参见services
  - 如需组织代码为仓库，参见repositories
  - 如需组织代码为实体，参见entities
- 数据持久化使用仓库模式
  - 需要缓存数据时参见cache
- 业务逻辑使用控制器模式与Riverpod
- 使用Riverpod管理状态
  - 需要保持状态存活时参见keepAlive
- 使用freezed管理UI状态
- 控制器始终以方法为输入并更新影响UI的UI状态
- 使用getIt管理依赖
  - 服务和仓库使用单例
  - 用例使用工厂
  - 控制器使用懒加载单例
- 使用AutoRoute管理路由
  - 使用extras在页面间传递数据
- 使用扩展管理可重用代码
- 使用ThemeData管理主题
- 使用AppLocalizations管理翻译
- 使用常量管理常量值
- 当小部件树过深时，会导致构建时间变长和内存使用增加。Flutter需要遍历整个树以渲染UI，因此扁平结构可提高效率
- 扁平的小部件结构使代码更易理解和修改。可重用组件也有助于更好的代码组织
- 避免在Flutter中深度嵌套小部件。深度嵌套的小部件会对Flutter应用的可读性、可维护性和性能产生负面影响。将复杂的小部件树分解为更小的、可重用的组件。这不仅使代码更清晰，还通过减少构建复杂性来提升性能
- 深度嵌套的小部件会使状态管理更具挑战性。保持树结构扁平，可以更容易地管理状态和在小部件之间传递数据
- 将大型小部件分解为更小、更专注的小部件
- 尽可能使用const构造函数以减少重建
- 代码里面的 withOpacity 都改成 withValues, 因为 withOpacity是 deprecated 的方法, 例如 .withOpacity(0.2) 改成 withValues(alpha: 0.2)

### 测试

- 使用Flutter标准小部件测试
- 为每个API模块使用集成测试
